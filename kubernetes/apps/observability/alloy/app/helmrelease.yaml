---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
  namespace: observability
spec:
  interval: 5m
  timeout: 10m
  chart:
    spec:
      chart: alloy
      version: 1.2.1
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    alloy:
      configMap:
        create: true
        content: |
          // Kubernetes pod discovery
          discovery.kubernetes "pods" {
            role = "pod"
          }

          // Relabel pods to add metadata
          discovery.relabel "pods" {
            targets = discovery.kubernetes.pods.targets
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "namespace"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "pod"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "container"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app"]
              target_label  = "app"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_node_name"]
              target_label  = "node"
            }
          }

          // Scrape Kubernetes pod logs
          loki.source.kubernetes "pods" {
            targets    = discovery.relabel.pods.output
            forward_to = [loki.write.loki.receiver]
          }

          // Syslog receiver for UDM Pro logs
          loki.source.syslog "external" {
            listener {
              address = "0.0.0.0:1514"
              protocol = "udp"
              syslog_format = "rfc3164"
              labels = {
                job = "syslog",
                source = "external",
                device = "udmpro",
              }
            }
            forward_to = [loki.process.cef_parser.receiver]
          }

          // Process CEF messages
          loki.process "cef_parser" {
            forward_to = [loki.write.loki.receiver]

            stage.regex {
              expression = "CEF:(?P<cef_version>\\d+)\\|(?P<vendor>[^|]*)\\|(?P<product>[^|]*)\\|(?P<device_version>[^|]*)\\|(?P<event_id>[^|]*)\\|(?P<name>[^|]*)\\|(?P<severity>[^|]*)\\|(?P<extensions>.*)"
            }

            stage.labels {
              values = {
                cef_vendor = "vendor",
                cef_product = "product",
                cef_severity = "severity",
                event_name = "name",
              }
            }

            // Parse CEF extensions
            stage.regex {
              source = "extensions"
              expression = "UNIFIcategory=(?P<unifi_category>\\S+)"
            }

            stage.labels {
              values = {
                unifi_category = "unifi_category",
              }
            }
          }

          // Write logs to Loki
          loki.write "loki" {
            endpoint {
              url = "http://loki.observability.svc.cluster.local:3100/loki/api/v1/push"
            }
          }

    controller:
      type: daemonset

    tolerations:
      - operator: Exists

    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 256Mi

    serviceMonitor:
      enabled: true
