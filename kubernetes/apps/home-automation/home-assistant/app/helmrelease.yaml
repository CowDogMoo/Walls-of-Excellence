---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: home-automation
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      home-assistant:
        annotations:
          reloader.stakater.com/auto: "true"
        # Init container to setup the initial ts configuration
        initContainers:
          setup-ts:
            image:
              repository: busybox
              tag: latest
            command:
              - sh
              - -c
              - |
                mkdir -p /config/.ts
                chmod 777 /config/.ts || true

                if [ -x /config/ts ] && [ ! -f /config/.ts/config.yaml ]; then
                  echo "$(date): Initial config creation"
                  HOME=/config /config/ts room list
                  chmod 666 /config/.ts/config.yaml || true
                fi
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/home-assistant
              tag: 2025.9.1@sha256:fe188478864988a04274743529685ad2f15dd3bb0041096a79dbe5a7b5ebc770
            env:
              # -- Set the container timezone
              TZ: "America/Denver"
            probes:
              liveness:
                enabled: false
              readiness:
                enabled: false
              startup:
                enabled: false
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 2Gi
          ts-config-monitor:
            securityContext:
              runAsUser: 65534
              runAsGroup: 65534
              allowPrivilegeEscalation: false
            image:
              repository: alpine
              tag: latest
            env:
              HOME: /config
            command:
              - sh
              - -c
              - |
                echo "$(date): Starting throwingshade config monitor"
                echo "$(date): Monitoring /config/.ts/config.yaml"
                CFG=/config/.ts/config.yaml

                # Monitor loop
                while true; do
                  # Check if ts binary exists
                  if [ ! -x /config/ts ]; then
                    echo "$(date): Waiting for /config/ts binary..."
                    sleep 60
                    continue
                  fi

                  # If config.yaml is a broken/looped symlink, remove it
                  if [ -L "$CFG" ] && ! readlink -f "$CFG" >/dev/null 2>&1; then
                    echo "$(date): Detected broken symlink at $CFG; fixing..."
                    rm -f "$CFG"
                  fi

                  # Run ts; capture output and exit code
                  OUTPUT=$(/config/ts room list 2>&1); STATUS=$?
                  if echo "$OUTPUT" | grep -qi "Failed to load configuration" || { [ "$STATUS" -ne 0 ] && [ ! -f "$CFG" ]; }; then
                    echo "$(date): Config corruption detected!"
                    echo "$(date): Error output: $OUTPUT"

                    # Remove corrupted config
                    echo "$(date): Removing corrupted config..."
                    rm -f "$CFG"

                    # Regenerate config
                    echo "$(date): Regenerating config..."
                    if /config/ts room list; then
                      chmod 666 /config/.ts/config.yaml || true
                      echo "$(date): Config regenerated successfully"
                    else
                      echo "$(date): Regen failed; will retry in 60s"
                    fi
                  else
                    # Only log periodically to avoid spam
                    if [ $(($(date +%s) % 300)) -lt 60 ]; then
                      echo "$(date): Config is valid"
                    fi
                  fi

                  # Check every 60 seconds
                  sleep 60
                done
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
              limits:
                cpu: 50m
                memory: 64Mi
        pod:
          # Enable devices to be discoverable
          hostNetwork: true
          # When hostNetwork is true, set dnsPolicy to ClusterFirstWithHostNet
          dnsPolicy: ClusterFirstWithHostNet
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/hostname
                        operator: In
                        values:
                          - k8s7
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: home-assistant
    service:
      app:
        controller: home-assistant
        type: LoadBalancer
        externalTrafficPolicy: Cluster
        ports:
          http:
            port: 8123
          homekit:
            port: 21063
    ingress:
      app:
        className: ingress-traefik
        annotations:
          external-dns.alpha.kubernetes.io/hostname: ha.techvomit.xyz
        hosts:
          - host: &host ha.techvomit.xyz
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: techvomit-xyz-production-tls
    logs:
      general:
        format: json
        level: DEBUG
    # Mount path running on nfs server to /config (default storageClass)
    persistence:
      config:
        enabled: true
        type: nfs
        server: 192.168.20.210
        path: /volume1/k8s/home-assistant
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
