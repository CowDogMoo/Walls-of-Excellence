---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: home-automation
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      home-assistant:
        annotations:
          reloader.stakater.com/auto: "true"
        # Init container to setup the initial ts configuration
        initContainers:
          setup-ts:
            image:
              repository: busybox
              tag: latest
            command:
              - sh
              - -c
              - |
                # Remove any existing .ts directory and create symlink to shared location on NFS
                rm -rf ~/.ts
                ln -sfn /config/.ts ~/.ts

                # Only initialize if config doesn't exist
                if [ ! -f /config/.ts/config.yaml ]; then
                  echo "$(date): Initial config creation"
                  /config/ts room list
                fi
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/home-assistant
              tag: 2025.9.0@sha256:762e782f6efc5a3fcf36092b31bef4caf76380b1cf4a3bc12fa85760792af476
            env:
              # -- Set the container timezone
              TZ: "America/Denver"
            # Add startup command to ensure symlink exists for main container
            lifecycle:
              postStart:
                exec:
                  command:
                    - sh
                    - -c
                    - |
                      rm -rf ~/.ts
                      ln -sfn /config/.ts ~/.ts
            probes:
              liveness:
                enabled: false
              readiness:
                enabled: false
              startup:
                enabled: false
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 2Gi
          ts-config-monitor:
            image:
              repository: alpine
              tag: latest
            command:
              - sh
              - -c
              - |
                # Setup symlink to shared config location
                rm -rf ~/.ts
                ln -sfn /config/.ts ~/.ts

                echo "$(date): Starting throwingshade config monitor"
                echo "$(date): Monitoring /config/.ts/config.yaml"

                # Monitor loop
                while true; do
                  # Check if ts binary exists
                  if [ ! -x /config/ts ]; then
                    echo "$(date): Waiting for /config/ts binary..."
                    sleep 60
                    continue
                  fi

                  # Run ts room list and check for config errors
                  OUTPUT=$(/config/ts room list 2>&1)

                  if echo "$OUTPUT" | grep -q "Failed to load configuration"; then
                    echo "$(date): Config corruption detected!"
                    echo "$(date): Error output: $OUTPUT"

                    # Remove corrupted config
                    echo "$(date): Removing corrupted config..."
                    rm -f /config/.ts/config.yaml

                    # Regenerate config
                    echo "$(date): Regenerating config..."
                    /config/ts room list

                    echo "$(date): Config regenerated successfully"
                  else
                    # Only log periodically to avoid spam
                    if [ $(($(date +%s) % 300)) -lt 60 ]; then
                      echo "$(date): Config is valid"
                    fi
                  fi

                  # Check every 60 seconds
                  sleep 60
                done
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
              limits:
                cpu: 50m
                memory: 64Mi
        pod:
          # Enable devices to be discoverable
          hostNetwork: true
          # When hostNetwork is true, set dnsPolicy to ClusterFirstWithHostNet
          dnsPolicy: ClusterFirstWithHostNet
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: home-assistant
    service:
      app:
        controller: home-assistant
        type: LoadBalancer
        externalTrafficPolicy: Cluster
        ports:
          http:
            port: 8123
          homekit:
            port: 21063
    ingress:
      app:
        className: ingress-traefik
        annotations:
          external-dns.alpha.kubernetes.io/hostname: ha.techvomit.xyz
        hosts:
          - host: &host ha.techvomit.xyz
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: techvomit-xyz-production-tls
    logs:
      general:
        format: json
        level: DEBUG
    # Mount path running on nfs server to /config (default storageClass)
    persistence:
      config:
        enabled: true
        type: nfs
        server: 192.168.20.210
        path: /volume1/k8s/home-assistant
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
