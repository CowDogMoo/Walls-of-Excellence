---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

set: [pipefail]

includes:
  ansible: https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/ansible/Taskfile.yaml
  flux:
    taskfile: .taskfiles/flux
    optional: true
  terraform: https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/terraform/Taskfile.yaml

vars:
  INVENTORY: "k3s-ansible/inventory/cowdogmoo/hosts.ini"
  K3S_ANSIBLE_DIR: "k3s-ansible"
  K8S_NODES: "k8s1 k8s2 k8s3 k8s4 k8s5 k8s6"

tasks:
  default:
    desc: Default task that performs a comprehensive setup check for k3s deployment
    cmds:
      - task: ansible:check-ansible
      - task: check-inventory
      - |-
        echo "All checks passed successfully."
    silent: true

  check-inventory:
    desc: "Check if inventory file exists"
    cmds:
      - |
        if [ ! -f "{{.INVENTORY}}" ]; then
          echo "Inventory file not found: {{.INVENTORY}}"
          echo "Please ensure your k3s-ansible inventory is properly configured."
          exit 1
        fi
    silent: true

  run-cmd-all:
    desc: "Run a command on all k8s nodes"
    summary: |
      Run a command on all k8s nodes via SSH

      Examples:
        task run-cmd-all -- 'echo "hello"'
        task run-cmd-all -- 'ip addr | grep 192'
        task run-cmd-all -- 'sudo reboot'
    vars:
      CMD: "{{.CLI_ARGS}}"
    cmds:
      - |
        if [ -z "{{.CMD}}" ]; then
          echo -e "\033[31mError: no command provided\033[0m"
          echo "Usage: task run-cmd-all -- 'your command here'"
          exit 1
        fi

        for node in {{.K8S_NODES}}; do
          echo -e "\033[33mNow running command on $node\033[0m"
          ssh $node "{{.CMD}}" || {
            echo -e "\033[31mError on $node: command failed\033[0m"
            exit 1
          }
        done

  run-cmd:
    desc: "Run a command on a specific k8s node"
    summary: |
      Run a command on a specific k8s node via SSH

      Examples:
        task run-cmd NODE=k8s1 -- 'echo "hello"'
        task run-cmd NODE=k8s2 -- 'ip addr | grep 192'
    vars:
      NODE: "{{.NODE}}"
      CMD: "{{.CLI_ARGS}}"
    cmds:
      - |
        if [ -z "{{.NODE}}" ]; then
          echo -e "\033[31mError: NODE variable not set\033[0m"
          echo "Usage: task run-cmd NODE=k8s1 -- 'your command here'"
          exit 1
        fi

        if [ -z "{{.CMD}}" ]; then
          echo -e "\033[31mError: no command provided\033[0m"
          echo "Usage: task run-cmd NODE=k8s1 -- 'your command here'"
          exit 1
        fi

        # Check if node is valid
        valid=false
        for node in {{.K8S_NODES}}; do
          if [ "$node" = "{{.NODE}}" ]; then
            valid=true
            break
          fi
        done

        if [ "$valid" = false ]; then
          echo -e "\033[31mError: {{.NODE}} is not a valid node\033[0m"
          echo "Valid nodes: {{.K8S_NODES}}"
          exit 1
        fi

        echo -e "\033[33mRunning command on {{.NODE}}\033[0m"
        ssh {{.NODE}} "{{.CMD}}"

  reboot:
    desc: "Reboot a specific node or all nodes"
    summary: |
      Reboot a specific k8s node or all nodes

      Examples:
        task reboot NODE=k8s1
        task reboot NODE=all
    vars:
      NODE: '{{.NODE | default ""}}'
    cmds:
      - |
        if [ -z "{{.NODE}}" ]; then
          echo -e "\033[31mError: NODE variable not set\033[0m"
          echo "Usage: task reboot NODE=k8s1"
          echo "       task reboot NODE=all"
          exit 1
        fi

        if [ "{{.NODE}}" = "all" ]; then
          echo -e "\033[33mRebooting all nodes...\033[0m"
          for node in {{.K8S_NODES}}; do
            echo -e "\033[33mRebooting $node\033[0m"
            ssh $node "sudo reboot" || true
          done
          exit 0
        fi

        # Check if node is valid
        valid=false
        for node in {{.K8S_NODES}}; do
          if [ "$node" = "{{.NODE}}" ]; then
            valid=true
            break
          fi
        done

        if [ "$valid" = false ]; then
          echo -e "\033[31mError: {{.NODE}} is not a valid node\033[0m"
          echo "Valid nodes: {{.K8S_NODES}}"
          exit 1
        fi

        echo -e "\033[33mRebooting {{.NODE}}\033[0m"
        ssh {{.NODE}} "sudo reboot"

  reboot-all:
    desc: "Reboot all k8s nodes"
    prompt: "This will reboot ALL k8s nodes. Are you sure?"
    cmds:
      - task: reboot
        vars:
          NODE: all

  ping:
    desc: "Ping all k3s nodes using ansible"
    deps: [ansible:check-ansible, check-inventory]
    vars:
      HOSTS: '{{.HOSTS | default "all"}}'
      DEBUG: '{{.DEBUG | default "false"}}'
    cmds:
      - |
        echo "Pinging {{.HOSTS}} nodes..."
        {{if eq .DEBUG "false"}}ANSIBLE_PYTHON_INTERPRETER=auto_silent {{end}}\
        ansible {{.HOSTS}} -i "{{.INVENTORY}}" -m ping
    silent: false

  ping-masters:
    desc: "Ping only master nodes"
    cmds:
      - task: ping
        vars:
          HOSTS: master

  ping-nodes:
    desc: "Ping only worker nodes"
    cmds:
      - task: ping
        vars:
          HOSTS: node

  provision:
    desc: "Provision k3s cluster (all nodes)"
    deps: [ansible:check-ansible, check-inventory]
    vars:
      GROUP: '{{.GROUP | default "all"}}'
    cmds:
      - |
        if [ "{{.GROUP}}" != "master" ] && [ "{{.GROUP}}" != "node" ] && [ "{{.GROUP}}" != "all" ]; then
          echo "Invalid group: {{.GROUP}}. Group must be 'master', 'node', or 'all'"
          exit 1
        fi
        echo "Provisioning k3s cluster on {{.GROUP}} nodes..."
        ansible-playbook "{{.K3S_ANSIBLE_DIR}}/site.yml" \
          -i "{{.INVENTORY}}" \
          --limit {{.GROUP}}

  provision-masters:
    desc: "Provision only master nodes"
    cmds:
      - task: provision
        vars:
          GROUP: master

  provision-nodes:
    desc: "Provision only worker nodes"
    cmds:
      - task: provision
        vars:
          GROUP: node

  reset:
    desc: "Reset k3s cluster (all nodes)"
    deps: [ansible:check-ansible, check-inventory]
    vars:
      GROUP: '{{.GROUP | default "all"}}'
    cmds:
      - |
        if [ "{{.GROUP}}" != "master" ] && [ "{{.GROUP}}" != "node" ] && [ "{{.GROUP}}" != "all" ]; then
          echo "Invalid group: {{.GROUP}}. Group must be 'master', 'node', or 'all'"
          exit 1
        fi
        echo "Resetting k3s cluster on {{.GROUP}} nodes..."
        ansible-playbook "{{.K3S_ANSIBLE_DIR}}/reset.yml" \
          -i "{{.INVENTORY}}" \
          --limit {{.GROUP}}

  reset-masters:
    desc: "Reset only master nodes"
    cmds:
      - task: reset
        vars:
          GROUP: master

  reset-nodes:
    desc: "Reset only worker nodes"
    cmds:
      - task: reset
        vars:
          GROUP: node

  reset-confirm:
    desc: "Reset k3s cluster with confirmation prompt"
    prompt: "This will reset your k3s cluster. Are you sure?"
    cmds:
      - task: reset

  status:
    desc: "Check cluster status by running kubectl get nodes"
    cmds:
      - |
        if ! command -v kubectl &> /dev/null; then
          echo "kubectl not found. Please install kubectl to check cluster status."
          exit 1
        fi
        echo "Checking k3s cluster status..."
        kubectl get nodes -o wide
